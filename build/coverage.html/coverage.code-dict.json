{"/home/travis/build/npmtest/node-npmtest-http-console/test.js":"/* istanbul instrument in package npmtest_http_console */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-console/lib.npmtest_http_console.js":"/* istanbul instrument in package npmtest_http_console */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_http_console = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_http_console = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-http-console/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-http-console && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_http_console */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_http_console\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_http_console.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_http_console.rollup.js'] =\n            local.assetsDict['/assets.npmtest_http_console.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_http_console.__dirname + '/lib.npmtest_http_console.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-console/node_modules/http-console/lib/http-console.js":"\nvar http = require('http'),\n    https = require('https'),\n    fs = require('fs'),\n    events = require('events'),\n    queryString = require('querystring'),\n    readline = require('readline'),\n    sys = require('util');\n\nrequire('./ext');\n\ntry {\n    var inspect = require('eyes').inspector({ maxLength: 0 });\n} catch (e) {\n    var inspect = function (obj) { console.log(sys.inspect(obj).white) }\n}\n\nvar consoles = [];\n\nthis.Console = function (host, port, options) {\n    this.host = host;\n    this.port = parseInt(port);\n    this.options = options;\n    this.timeout = this.options.timeout ? 5000 : 0;\n    this.path = [];\n    this.socket = null;\n    this.cookies = {};\n    consoles.push(this);\n};\n\nthis.Console.prototype = new(function () {\n    this.initialize = function () {\n        var that = this;\n\n        this.welcome();\n\n        this.headers = { 'Accept': '*/*' };\n\n        if (this.options.json) {\n            this.headers['Accept'] = 'application/json';\n            this.headers['Content-Type'] = 'application/json';\n        }\n\n        if (this.options.auth) {\n            this.headers['Authorization'] = \"Basic \" +\n                new(Buffer)(this.options.auth.username + ':' + this.options.auth.password).toString('base64');\n        }\n\n        this.readline = readline.createInterface(process.stdin, process.stdout);\n\n        this.readline.on('line', function (cmd) {\n            that.exec(cmd.trim());\n        }).on('close', function () {\n            process.stdout.write('\\n');\n            process.exit(0);\n        });\n\n        this.prompt();\n\n        return this;\n    };\n    this.welcome = function () {\n        process.stdout.write(\"> \" + (\"http-console \" + exports.version).bold + '\\n' +\n                             \"> Welcome, enter .help if you're lost.\" + '\\n' +\n                             \"> Connecting to \" + this.host + \" on port \" + this.port + '.\\n\\n');\n    };\n    this.request = function (method, path, headers, callback) {\n        var request, that = this;\n\n        this.headers['Host'] = this.host;\n\n        for (var k in this.headers) { headers[k] = this.headers[k] }\n\n        method = method.toUpperCase();\n        path   = encodeURI(path);\n\n        if (this.options.verbose) {\n            console.log('> ' + (method + ' ' + path).grey);\n        }\n\n        this.setCookies(headers);\n\n        request = (this.options.useSSL ? https : http).request({\n            host:    that.host,\n            port:    that.port,\n            method:  method,\n            path:    path,\n            headers: headers\n        }, function (res) {\n            var body = \"\";\n\n            res.setEncoding('utf8');\n\n            if (that.options.rememberCookies) { that.rememberCookies(res.headers) }\n            res.on('data', function (chunk) { body += chunk });\n            res.on('end',  function ()      { callback(res, body) });\n        }).on('error', function (e) {\n            sys.error(e.toString().red);\n            that.prompt();\n        });\n\n        return request;\n    };\n    this.setCookies = function (headers) {\n        var that = this, header;\n        if ((keys = Object.keys(this.cookies)).length) {\n            header = keys.filter(function (k) {\n                var options = that.cookies[k].options;\n                return (!options.expires || options.expires >= Date.now()) &&\n                       (!options.path    || ('/' + that.path.join('/')).match(new(RegExp)('^' + options.path)));\n            }).map(function (k) {\n                return [k, queryString.escape(that.cookies[k].value) || ''].join('=');\n            }).join(', ');\n            header && (headers['Cookie'] = header);\n        }\n    };\n    this.exec = function (command) {\n        var method, headers = {}, path = this.path, body,\n            that = this,\n            match, req;\n\n        if (this.pending) {\n            req = this.request(this.pending.method, this.pending.path, {\n                'Content-Length' : command.length\n            }, function (res, body) {\n                that.printResponse(res, body, function () {\n                    that.prompt();\n                });\n            });\n            req.write(command);\n            req.end();\n\n            return this.pending = null;\n        } else if (command[0] === '/') {\n            if (command === '//') {\n                this.path = [];\n            } else {\n                Array.prototype.push.apply(\n                    this.path, command.slice(1).split('/')\n                );\n            }\n        } else if (command === '..') {\n            this.path.pop();\n        } else if (command[0] === '.') {\n            switch (command.slice(1)) {\n                case 'h':\n                case 'headers':\n                    exports.merge(headers, this.headers);\n                    this.setCookies(headers);\n                    this.printHeaders(headers);\n                    break;\n                case 'default-headers':\n                    this.printHeaders(this.headers);\n                    break;\n                case 'o':\n                case 'options':\n                    inspect(this.options);\n                    break;\n                case 'c':\n                case 'cookies':\n                    inspect(this.cookies);\n                    break;\n                case 'help':\n                    console.log(exports.help);\n                    break;\n                case 'j':\n                case 'json':\n                    this.headers['Content-Type'] = 'application/json';\n                    break;\n                case 'exit':\n                case 'quit':\n                case 'q':\n                    process.exit(0);\n            }\n        } else if (command[0] === '\\\\') {\n            this.exec(command.replace(/^\\\\/, '.'));\n        } else if (match = command.match(/^([a-zA-Z-]+):\\s*(.*)/)) {\n            if (match[2]) {\n                this.headers[match[1]] = match[2];\n            } else {\n                delete(this.headers[match[1]]);\n            }\n        } else if (/^(GET|POST|PUT|PATCH|HEAD|DELETE|OPTIONS)/i.test(command)) {\n            command = command.split(/\\s+/);\n            method  = command.shift().toUpperCase();\n            path    = this.path.slice(0);\n\n            if (command.length > 0) { path.push(command[0]) }\n\n            path = ('/' + path.join('/')).replace(/\\/+/g, '/');\n\n            if (method === 'PUT' || method === 'POST') {\n                this.pending = { method: method, path: path };\n                this.dataPrompt();\n            } else {\n                this.request(method, path, {}, function (res, body) {\n                    that.printResponse.call(that, res, body, function () {\n                        that.prompt();\n                    });\n                }).end();\n            }\n            return;\n        } else if (command) {\n            console.log((\"unknown command '\" + command + \"'\").yellow.bold);\n        }\n        this.prompt();\n    };\n    this.printResponse = function (res, body, callback) {\n        var status = ('HTTP/' + res.httpVersion +\n                      ' '     + res.statusCode  +\n                      ' '     + http.STATUS_CODES[res.statusCode]).bold, output;\n\n        if      (res.statusCode >= 500) { status = status.red }\n        else if (res.statusCode >= 400) { status = status.yellow }\n        else if (res.statusCode >= 300) { status = status.cyan }\n        else                            { status = status.green }\n\n        console.log(status);\n\n        this.printHeaders(res.headers);\n\n        console.log();\n\n        try       { output = JSON.parse(body) }\n        catch (_) { output = body.trim() }\n\n        if (typeof(output) === 'string') {\n            output.length > 0 && console.log(output.white);\n        } else {\n            inspect(output);\n        }\n\n        // Make sure the buffer is flushed before\n        // we display the prompt.\n        if (process.stdout.write('')) {\n            callback();\n        } else {\n            process.stdout.on('drain', function () {\n                callback();\n            });\n        }\n    };\n    this.prompt = function () {\n        var protocol = this.options.useSSL ? 'https://' : 'http://',\n            path     = '/' + this.path.join('/'),\n            host     = this.host + ':' + this.port,\n            arrow    = '> ';\n\n        var length = (protocol + host + path + arrow).length;\n\n        this.readline.setPrompt((protocol + host).grey + path + arrow.grey, length);\n        this.readline.prompt();\n    };\n    this.dataPrompt = function () {\n        var prompt = '... ';\n        this.readline.setPrompt(prompt.grey, prompt.length);\n        this.readline.prompt();\n    };\n    this.printHeaders = function (headers) {\n        Object.keys(headers).forEach(function (k) {\n            var key = k.replace(/\\b([a-z])/g, function (_, m) {\n                return m.toUpperCase();\n            }).bold;\n            console.log(key + ': ' + headers[k]);\n        });\n    };\n    this.rememberCookies = function (headers) {\n        var that = this;\n        var parts, cookie, name, value, keys;\n\n        if ('set-cookie' in headers) {\n            headers['set-cookie'].forEach(function (c) {\n                parts  = c.split(/; */);\n                cookie = parts.shift().match(/^(.+?)=(.*)$/).slice(1);\n                name   = cookie[0];\n                value  = queryString.unescape(cookie[1]);\n\n                cookie = that.cookies[name] = {\n                    value: value,\n                    options: {}\n                };\n\n                parts.forEach(function (part) {\n                    part = part.split('=');\n                    cookie.options[part[0]] = part.length > 1 ? part[1] : true;\n                });\n\n                if (cookie.options.expires) {\n                    cookie.options.expires = new(Date)(cookie.options.expires);\n                }\n            });\n        }\n    };\n});\n\nthis.version = fs.readFileSync(require('path').join(__dirname, '..', 'package.json'))\n                 .toString().match(/\"version\"\\s*:\\s*\"([\\d.]+)\"/)[1];\n\nthis.help = [\n    '.h[eaders]  ' +  'show active request headers.'.grey,\n    '.o[ptions]  ' +  'show options.'.grey,\n    '.c[ookies]  ' +  'show client cookies.'.grey,\n    '.j[son]     ' +  'set \\'Content-Type\\' header to \\'application/json\\'.'.grey,\n    '.help       ' +  'display this message.'.grey,\n    '.q[uit]     ' +  'exit console.'.grey\n].join('\\n');\n\nthis.merge = function (target /*, objects... */) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    args.forEach(function (a) {\n        var keys = Object.keys(a);\n        for (var i = 0; i < keys.length; i++) {\n            target[keys[i]] = a[keys[i]];\n        }\n    });\n    return target;\n};\n\nprocess.on('uncaughtException', function (e) {\n    console.log(e.stack.red);\n    consoles[consoles.length - 1].prompt();\n});\n\nprocess.on('exit', function () {\n    consoles.forEach(function (c) {\n        // TODO: Cleanup\n    });\n    console.log();\n});\n\n","/home/travis/build/npmtest/node-npmtest-http-console/node_modules/http-console/lib/ext/index.js":"\n['bold', 'grey', 'yellow', 'red', 'green', 'white', 'cyan'].forEach(function (style) {\n    Object.defineProperty(String.prototype, style, {\n        get: function () {\n            return stylize(this, style);\n        }\n    });\n});\n\nfunction stylize(str, style) {\n    var styles = {\n        'bold'      : [1,  22],\n        'italic'    : [3,  23],\n        'underline' : [4,  24],\n        'yellow'    : [33, 39],\n        'cyan'      : [36, 39],\n        'white'     : [37, 39],\n        'green'     : [32, 39],\n        'red'       : [31, 39],\n        'grey'      : [90, 39],\n    };\n    return '\\033[' + styles[style][0] + 'm' + str +\n           '\\033[' + styles[style][1] + 'm';\n};\n"}